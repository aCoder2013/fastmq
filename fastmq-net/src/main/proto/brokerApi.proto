syntax = "proto3";

package com.song.fastmq.broker.net;
option java_package = "com.song.fastmq.net.proto";
option optimize_for = LITE_RUNTIME;


message MessageIdData {
    uint64 ledgerId = 1;
    uint64 entryId = 2;
}

/// Create a new Producer on a topic, assigning the given producer_id,
/// all messages sent with this producer_id will be persisted on the topic
message CommandProducer {
    string topic = 1;
    uint64 producer_id = 2;
    uint64 request_id = 3;

    /// If a producer name is specified, the name will be used,
    /// otherwise the broker will generate a unique name
    string producer_name = 4;
}

/// Response from CommandProducer
message CommandProducerSuccess {
    uint64 request_id = 1;
    string producer_name = 2;
}

message CommandSend {
    map<string, string> headers = 1;
    map<string, string> properties = 2;
    bytes body = 3;
}

message CommandSendReceipt {
    uint64 producer_id = 1;
    uint64 sequence_id = 2;
    MessageIdData message_id = 3;
}

message CommandSendError {
    uint64 producer_id = 1;
    uint64 sequence_id = 2;
    ServerError error = 3;
    string message = 4;
}

message CommandSubscribe {
    string topic = 1;
    uint64 consumer_id = 2;
    uint64 request_id = 3;
    string consumer_name = 4;
}

message CommandMessage {
    string topic = 1;
    uint64 consumer_id = 2;
    MessageIdData next_read_offset = 3;
    repeated CommandSend messages = 4;
}

message CommandError {
    uint64 request_id = 1;
    ServerError error = 2;
    string message = 3;
}

message CommandSuccess {
    uint64 request_id = 1;
}

message CommandPullMessage {
    string topic = 1;
    uint64 consumer_id = 2;
    uint64 request_id = 3;
    uint32 max_message = 4;
    MessageIdData message_id = 5;
}

message CommandFetchOffset {
    string topic = 1;
    uint64 consumer_id = 2;
    string consumer_name = 3;
    uint64 request_id = 4;
}

message CommandFetchOffsetResponse {
    string topic = 1;
    uint64 consumer_id = 2;
    MessageIdData message_id = 3;
}

message Command {
    enum Type {
        CONNECT = 0;
        CONNECTED = 1;
        SUBSCRIBE = 2;

        PRODUCER = 3;

        SEND = 4;
        SEND_RECEIPT = 5;
        SEND_ERROR = 6;

        MESSAGE = 7;
        ACK = 8;
        FLOW = 9;

        UNSUBSCRIBE = 10;

        SUCCESS = 11;
        ERROR = 12;

        CLOSE_PRODUCER = 13;
        CLOSE_CONSUMER = 14;

        PRODUCER_SUCCESS = 15;

        PULL_MESSAGE = 16;

        FETCH_CONSUMER_OFFSET = 17;

        FETCH_CONSUMER_OFFSET_RESPONSE = 18;
    }

    Type type = 1;

    CommandProducer producer = 2;

    CommandProducerSuccess producerSuccess = 3;

    CommandSend send = 4;

    CommandSendReceipt send_receipt = 5;

    CommandSendError send_error = 6;

    CommandSubscribe subscribe = 7;

    CommandError error = 8;

    CommandSuccess success = 9;

    CommandPullMessage pull_message = 10;

    CommandMessage message = 11;

    CommandFetchOffset fetch_offset = 12;

    CommandFetchOffsetResponse fetch_offset_response = 13;
}

enum ServerError {
    UnknownError = 0;
    MetadataError = 1; // Error with ZK/metadata
    PersistenceError = 2; // Error writing reading from BK
    AuthenticationError = 3; // Non valid authentication
    AuthorizationError = 4; // Not authorized to use resource

    ConsumerBusy = 5; // Unable to subscribe/unsubscribe because
    // other consumers are connected
    ServiceNotReady = 6; // Any error that requires client retry operation with a fresh lookup
    ProducerBlockedQuotaExceededError = 7; // Unable to create producer because backlog quota exceeded
    ProducerBlockedQuotaExceededException = 8; // Exception while creating producer because quota exceeded
}